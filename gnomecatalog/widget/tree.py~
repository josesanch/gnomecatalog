# -*- coding: UTF-8 -*-

import gtk, pango, gobject
import icons
from menu import MenuDisks

class ColumnText(gtk.TreeViewColumn):
	def __init__(self, name, ncol):
		r = gtk.CellRendererText()
		r.set_property("ellipsize",pango.ELLIPSIZE_END)
		gtk.TreeViewColumn.__init__(self,name,r,markup=ncol)

		self.set_sizing(gtk.TREE_VIEW_COLUMN_AUTOSIZE)
#		self.set_expand(True)

class Column(gtk.TreeViewColumn):
	def __init__(self, name, ncolumn, size = None, expand = False):
		gtk.TreeViewColumn.__init__(self, name)
		r = gtk.CellRendererText()
		r.set_property("xalign", 0)
		r.set_property("ellipsize", pango.ELLIPSIZE_END)
		self.pack_start(r, expand = True)
		self.add_attribute(r, "markup", ncolumn)
		self.set_resizable(True)
		self.set_clickable(True)
		self.set_reorderable(True)
		if size:
			self.set_min_width(size)
		self.set_expand(expand)
		self.set_sort_column_id(ncolumn)
		self.set_sizing(gtk.TREE_VIEW_COLUMN_AUTOSIZE)

class ColumnPixbuf(gtk.TreeViewColumn):
	def __init__(self,name,ncol):
		r = gtk.CellRendererPixbuf()
		gtk.TreeViewColumn.__init__(self,name,r,pixbuf=ncol)
		self.set_sizing(gtk.TREE_VIEW_COLUMN_AUTOSIZE)

class ColumnPixbufText(gtk.TreeViewColumn):
	def __init__(self,name, pcol, tcol):
		r = gtk.CellRendererPixbuf()
		t = gtk.CellRendererText()
		t.set_property("ellipsize",pango.ELLIPSIZE_END)
		gtk.TreeViewColumn.__init__(self,name)
		self.pack_start(r, False)
		self.set_attributes(r, pixbuf=pcol)
		self.pack_start(t)
		self.set_attributes(t, markup=tcol)
		self.set_expand(True)
		self.set_sort_column_id(tcol)
		self.set_sizing(gtk.TREE_VIEW_COLUMN_AUTOSIZE)

class ColumnRating(gtk.TreeViewColumn):
	def __init__(self, name, pos, callback):
		gtk.TreeViewColumn.__init__(self, name)

		self.set_resizable(True)
		self.set_clickable(True)

		for i in range(1, 6):
			renderer_pixbuf = gtk.CellRendererPixbuf()
			if i == 1:
				renderer_pixbuf.set_property('xalign', 1.0)
				renderer_pixbuf.set_property('width', 25)

			self.pack_start(renderer_pixbuf, False)
			self.set_cell_data_func(renderer_pixbuf, callback, i)

		self.set_sizing(gtk.TREE_VIEW_COLUMN_AUTOSIZE)
		self.set_sort_column_id(pos)
		self.set_alignment(0)


class Disks(gtk.TreeView):
	def __init__(self, files, panel):
		gtk.TreeView.__init__(self)
		self.files = files
		self.panel = panel
		self.set_rules_hint(True)	# Alternal el color de las filas
#		self.set_headers_visible(False)

		self.connect("row-activated", self.__row_activated)
		self.connect("row-expanded", self.__row_expanded)
		self.connect("cursor-changed", self.__cursor_changed)
		self.files.connect("row-activated", self.__row_activated_files)
		self.connect('button-press-event', self.__button_press_event)

		self.model = gtk.TreeStore(object, gtk.gdk.Pixbuf, str)

		self.append_column(ColumnPixbufText(_("Disk"), 1, 2))
#		self.append_column(Column(_("Disks"), 2))
		self.set_search_column(2)
		self.set_model(self.model)
		self.set_hadjustment( gtk.Adjustment())
		self.show()



	def __row_activated_files(self, widget, path, column):
		item = self.files.get_item_from_path(path)
		self.select(item)
		self.__cursor_changed(self)

	def get_item(self, iter):
		return self.model[iter][0]

	def __row_activated(self, widget, iter, path):
		print widget, iter, path,

	def __cursor_changed(self, widget, preserve_select = False):
		(model, iter) = self.get_selection().get_selected()
		item = self.get_item(iter)
		for file in item.files:
			file.parent = item
		self.files.set_data(item.files, preserve_select)

	def show_files(self):
		self.__cursor_changed(self)

	def __row_expanded(self, widget, iter, path):
		iter = self.model.iter_children(iter)
		while True:
			if not self.model.iter_children(iter):
				item = self.model[iter][0]
				print item.name
				for dir in item.dirs:
					self.model.append(iter, [dir, dir.get_icon(), dir.name])

			iter = self.model.iter_next(iter)
			if not iter: break


	def select(self, item):
		iter = self.model.foreach(self.__select_handler, item)
		self.set_selected(self.__searchIter)

	def __select_handler(self, model, path, iter, item =  None):
		file = self.get_item(iter)
		found = False
		if item.is_catalog():
			if file.id  == item.id and file.is_catalog(): found = True
		elif item.is_disk():
			if file.id  == item.id and file.is_disk(): found = True
		elif item.is_dir():
			if file.id  == item.id and file.is_dir(): found = True

		if found:
			self.__searchIter = iter
			return True

	def set_selected(self, iter):
		try: self.expand_to_path(self.model.get_path(iter))
		except: pass
		self.get_selection().select_iter(iter)

	def set_data(self, items):
		self.set_model(None)
		self.model.clear()
		self.add(items)
		self.set_model(self.model)


	def add(self, items):

		if type(item) != list:
			items = [ items ]

		for item in items:
			iter = self.model.append(None, [item, item.get_icon(), item.name])
			item.iter = iter
			for jitem in item.dirs:
				jiter = self.model.append(iter, [jitem, jitem.get_icon(), jitem.name])
				jitem.iter = jiter

		self.set_model(self.model)


	def __button_press_event(self, widget, event):
		if event.button == 3:	# Si se pulsa el boton derecho
			menu = MenuDisks()
			menu.get_widget("/popup").popup(None,None,None,event.button,  event.time)
#			self.menu_files.popup(None,None,None,event.button,  event.time)


class Files(gtk.TreeView):
	forecolor = '#606060'
	def __init__(self, panel):
		gtk.TreeView.__init__(self)
		self.panel = panel
		self.set_rules_hint(True)	# Alternal el color de las filas
		self.set_headers_visible(True)
		self.model = gtk.ListStore(object, gtk.gdk.Pixbuf, str, str, int)

		self.append_column(ColumnPixbufText(_("Files"), 1, 2))
		self.append_column(Column(_("Size"), 3, 100))
		self.append_column(ColumnRating(_("Rating"), 4, self.__cell_paint_rating))

		self.set_model(self.model)
		self.show()
		self.connect("cursor-changed", self.__cursor_changed)
		self.panel.connect('comment_changed', self.__comment_changed)
#		self.connect("row-activated", self.__row_activated)

	def set_data(self, items, preserve_select = False):
		if preserve_select:
			(model, iter) = self.get_selection().get_selected()

		self.model.clear()
		self.set_model(None)

		for item in items:
			if item.rating: rating = item.rating
			else: rating = 0

			iter = self.model.append([item, item.get_icon(), self.__item_text(item), "<span foreground=\""+ self.forecolor +"\"><small>"  + item.get_size() + "</small></span>", rating])
			item.iter = iter

		self.set_model(self.model)
		if preserve_select:
			self.get_selection().select_iter(iter)


	def __item_text(self, item, search = False):
		text = item.name
		if search:
			text = text + "\n<span foreground=\""+ self.color +"\"><small><b>" + item.get_location() + "</b></small></span>"

		if item.comment: text = text + "\n<span foreground=\""+ self.forecolor +"\"><small>" + item.comment + "</small></span>"

		if not item.is_dir():
			duration = item.get_duration()
			if duration:
				text = text + "<span foreground=\""+ self.forecolor +"\"><small>     (" +  duration + ")</small></span>"
		return text

	def __cursor_changed(self, widget):
		(model, iter) = self.get_selection().get_selected()
		if not iter: return True
		item = model[iter][0]
		self.panel.show_info(item)

	def __comment_changed(self, widget, item):
		self.model.set(item.iter, 2, self.__item_text(item))

	def get_item(self, iter):
		return self.model[iter][0]

	def get_item_from_path(self, path):
		return self.model[self.model.get_iter(path)][0]

		""" Paint rating """
	def __cell_paint_rating(self, column, cell, model, iter, data):
		item = self.get_item(iter)
		if item.is_file():
			if data <= item.rating:
				cell.set_property('pixbuf', icons.icons["star_on"])
			else:
				cell.set_property('pixbuf', icons.icons["star_off"])
